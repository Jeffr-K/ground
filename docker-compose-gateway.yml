version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS
      - "8080:8080"  # 대시보드
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/config:/etc/traefik/config
      - ./traefik/certs:/etc/certs
    networks:
      - app-network
      - gateway-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=web"

  # ===== Kong - 주석 처리된 API 게이트웨이 =====
  # kong-database:
  #   image: postgres:13
  #   container_name: kong-database
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_USER: kong
  #     POSTGRES_DB: kong
  #     POSTGRES_PASSWORD: kongpass
  #   volumes:
  #     - kong_data:/var/lib/postgresql/data
  #   networks:
  #     - gateway-network
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "kong"]
  #     interval: 30s
  #     timeout: 30s
  #     retries: 3

  # kong-migration:
  #   image: kong:3.4
  #   container_name: kong-migration
  #   depends_on:
  #     - kong-database
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: kong-database
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: kongpass
  #   command: kong migrations bootstrap
  #   networks:
  #     - gateway-network
  #   restart: on-failure

  # kong:
  #   image: kong:3.4
  #   container_name: kong
  #   restart: unless-stopped
  #   depends_on:
  #     - kong-database
  #     - kong-migration
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: kong-database
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: kongpass
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
  #   ports:
  #     - "8000:8000" # Kong 프록시
  #     - "8443:8443" # Kong 프록시 (HTTPS)
  #     - "8001:8001" # Kong Admin API
  #     - "8444:8444" # Kong Admin API (HTTPS)
  #   networks:
  #     - gateway-network
  #     - app-network
  #   healthcheck:
  #     test: ["CMD", "kong", "health"]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 3

  # konga:
  #   image: pantsel/konga:latest
  #   container_name: konga
  #   restart: unless-stopped
  #   depends_on:
  #     - kong
  #   environment:
  #     NODE_ENV: production
  #     DB_ADAPTER: postgres
  #     DB_HOST: kong-database
  #     DB_USER: kong
  #     DB_PASSWORD: kongpass
  #     DB_DATABASE: konga
  #     KONGA_HOOK_TIMEOUT: 120000
  #     DB_PG_SCHEMA: public
  #     NODE_TLS_REJECT_UNAUTHORIZED: 0
  #   ports:
  #     - "1337:1337"
  #   networks:
  #     - gateway-network

  # ===== Caddy - 주석 처리된 API 게이트웨이 =====
  # caddy:
  #   image: caddy:2
  #   container_name: caddy
  #   restart: unless-stopped
  #   ports:
  #     - "8090:80"
  #     - "8443:443"
  #   volumes:
  #     - ./caddy/Caddyfile:/etc/caddy/Caddyfile
  #     - caddy_data:/data
  #     - caddy_config:/config
  #   networks:
  #     - gateway-network
  #     - app-network

  # ===== Istio - 주석 처리된 서비스 메시 =====
  # istio-init:
  #   image: curlimages/curl:latest
  #   container_name: istio-init
  #   restart: on-failure
  #   command: >
  #     sh -c '
  #     echo "NOTE: Istio는 실제로 Docker Compose에서 실행하기 어렵습니다."
  #     echo "Istio는 Kubernetes 환경에서 사용하기를 권장합니다."
  #     echo "이 컨테이너는 단순히 설명을 위한 예시입니다."
  #     exit 0
  #     '
  #   networks:
  #     - gateway-network

  # ===== Linkerd - 주석 처리된 서비스 메시 =====
  # linkerd-init:
  #   image: curlimages/curl:latest
  #   container_name: linkerd-init
  #   restart: on-failure
  #   command: >
  #     sh -c '
  #     echo "NOTE: Linkerd는 실제로 Docker Compose에서 실행하기 어렵습니다."
  #     echo "Linkerd는 Kubernetes 환경에서 사용하기를 권장합니다."
  #     echo "이 컨테이너는 단순히 설명을 위한 예시입니다."
  #     exit 0
  #     '
  #   networks:
  #     - gateway-network

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/html:/usr/share/nginx/html
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.localhost`)"
      - "traefik.http.services.api.loadbalancer.server.port=80"

networks:
  app-network:
    external: true
  gateway-network:
    driver: bridge

volumes:
  kong_data:
  caddy_data:
  caddy_config: